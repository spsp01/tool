from django.db import models
from django.conf import settings


class Client(models.Model):
    name = models.CharField(max_length=55)
    logo = models.FileField
    def __str__(self):
        return self.name

class RaportScreaming(models.Model):
    def __str__(self):
        return str(self.client)+' '+str(self.date_crawled)

    client = models.ForeignKey('Client',on_delete='Cascade')
    date_crawled = models.DateField()
    total_url_encountered = models.IntegerField()
    total_url_crawled = models.IntegerField()
    internal_blocked_by_robots = models.IntegerField()
    external_blocked_by_robots = models.IntegerField()
    total_internal_url = models.IntegerField()
    total_external_url = models.IntegerField()
    internal_all = models.IntegerField()
    internal_html = models.IntegerField()
    internal_javascript = models.IntegerField()
    internal_css = models.IntegerField()
    internal_images = models.IntegerField()
    internal_pdf = models.IntegerField()
    internal_flash = models.IntegerField()
    internal_other = models.IntegerField()
    external_all = models.IntegerField()
    external_html = models.IntegerField()
    external_javascript = models.IntegerField()
    external_css = models.IntegerField()
    external_images = models.IntegerField()
    external_pdf = models.IntegerField()
    external_flash = models.IntegerField()
    external_other = models.IntegerField()
    protocol_http = models.IntegerField()
    protocol_https = models.IntegerField()
    resp_all = models.IntegerField()
    resp_blocked_robots = models.IntegerField()
    resp_blocked_resource = models.IntegerField()
    resp_no_resp = models.IntegerField()
    resp_success = models.IntegerField()
    resp_redirection = models.IntegerField()
    resp_redirection_javascript = models.IntegerField()
    resp_redirection_meta = models.IntegerField()
    resp_client_error = models.IntegerField()
    resp_server_error = models.IntegerField()
    content_large_pages = models.IntegerField()
    content_low_content_pages = models.IntegerField()
    uri_all = models.IntegerField()
    uri_non_ascii = models.IntegerField()
    uri_underscores = models.IntegerField()
    uri_uppercase = models.IntegerField()
    uri_duplicate = models.IntegerField()
    uri_parameters = models.IntegerField()
    uri_over_115 = models.IntegerField()
    titles_all = models.IntegerField()
    titles_missing = models.IntegerField()
    titles_duplicate = models.IntegerField()
    titles_over_65 = models.IntegerField()
    titles_below_30 = models.IntegerField()
    titles_over_571 = models.IntegerField()
    titles_below_200 = models.IntegerField()
    titles_same_h1 = models.IntegerField()
    titles_multiple = models.IntegerField()
    description_all = models.IntegerField()
    description_missing = models.IntegerField()
    description_duplicate = models.IntegerField()
    description_over_320 = models.IntegerField()
    description_below_70 = models.IntegerField()
    description_over_1866 = models.IntegerField()
    description_below_400 = models.IntegerField()
    description_multiple = models.IntegerField()
    h1_all = models.IntegerField()
    h1_missing = models.IntegerField()
    h1_duplicate = models.IntegerField()
    h1_over_70 = models.IntegerField()
    h1_multiple = models.IntegerField()
    h2_all = models.IntegerField()
    h2_missing = models.IntegerField()
    h2_duplicate = models.IntegerField()
    h2_over_70 = models.IntegerField()
    h2_multiple = models.IntegerField()
    images_all = models.IntegerField()
    images_over = models.IntegerField()
    images_missing_alt = models.IntegerField()
    dir_all = models.IntegerField()
    dir_canonical = models.IntegerField()
    dir_canonical_self = models.IntegerField()
    dir_canonicalised = models.IntegerField()
    dir_no_canonical = models.IntegerField()
    dir_next_prev = models.IntegerField()
    dir_index = models.IntegerField()
    dir_noindex = models.IntegerField()
    dir_follow = models.IntegerField()
    dir_nofollow = models.IntegerField()
    dir_none = models.IntegerField()
    dir_noachive = models.IntegerField()
    dir_nosnippet = models.IntegerField()
    dir_noodp = models.IntegerField()
    dir_noydir = models.IntegerField()
    dir_noimageindex = models.IntegerField()
    dir_notranslate = models.IntegerField()
    dir_unavailable = models.IntegerField()
    dir_refresh = models.IntegerField()
    href_all = models.IntegerField()
    href_missing_conf = models.IntegerField()
    href_inconsistent_language = models.IntegerField()
    href_noncanonical_conf  = models.IntegerField()
    href_noindex_conf = models.IntegerField()
    href_incorrect_lanmguage_code = models.IntegerField()
    href_multiple_entries = models.IntegerField()
    href_missinf_self_ref = models.IntegerField()
    href_non_using_canonical = models.IntegerField()
    href_missing_xdefaults = models.IntegerField()
    href_missing  = models.IntegerField()
    ajax_all = models.IntegerField()
    ajax_hash = models.IntegerField()
    ajax_without = models.IntegerField()
    depth_0 = models.IntegerField()
    depth_1 = models.IntegerField()
    depth_2 = models.IntegerField()
    depth_3 = models.IntegerField()
    depth_4 = models.IntegerField()
    depth_5 = models.IntegerField()
    depth_6 = models.IntegerField()
    depth_7 = models.IntegerField()
    depth_8 = models.IntegerField()
    depth_9 = models.IntegerField()
    depth_10 = models.IntegerField()
    resp_1 = models.IntegerField()
    resp_2 = models.IntegerField()
    resp_3 = models.IntegerField()
    resp_4 = models.IntegerField()
    resp_5 = models.IntegerField()
    resp_6 = models.IntegerField()
    resp_7 = models.IntegerField()


class RaportScreamingtest(models.Model):
    def __str__(self):
        return str(self.client)+' '+str(self.date_crawled)

    client = models.ForeignKey('Client', on_delete='Cascade')
    date_crawled = models.DateField()
    total_url_encountered = models.IntegerField()
    total_url_crawled = models.IntegerField()
   # Create your models here.


class RaportScreamingAll(models.Model):
    def __str__(self):
        return str(self.client)+' '+str(self.date_crawled)


class Person(models.Model):
    name = models.CharField(max_length=30)
    email = models.EmailField(blank=True)
    birth_date = models.DateField()
    birth_date2 = models.DateField()
    location = models.CharField(max_length=100, blank=True)

# class CSVUpload(models.Model):
#     file = models.FileField(upload_to='/raport/')